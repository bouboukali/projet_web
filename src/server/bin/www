#!/usr/bin/env node

/* Pourquoi une ligne de commande ? : https://medium.com/netscape/a-guide-to-create-a-nodejs-command-line-package-c2166ad0452e */

// ce code est un squelette générable automatiquement par node js (voir doc express)

/*
app.js
contains all the middleware(body-parser,morgan,etc) and routes.
it exports app object at the last.

www
here it creates a httpServer and passes app as the handler
var server = http.createServer(app);

besides also sets the port server.listen(port);
also sets the functions to be called if there is an error while starting the server: server.on('error', onError);
Explanation so, basically it removes all the create and start server code from your app.js and let you focus only on the application logic part.
Note: If you see in package.json file you would note this:

"scripts": {
  "start": "node ./bin/www"
}
this means if you type in terminal npm start then it will automatically start the ./bin/www file.
*/

/**
 * Read env variables
 */
if (process.env.NODE_ENV === 'development') {
  require('dotenv').config()
}

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('generated-app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3030'); // dépend si on est en development ou pas
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app); // Renvoie un objet http.Server

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port); // Starts the HTTP server listening for connections on the port
server.on('error', onError); // quand on a l'évènement error, on lance la fonction callback onError
server.on('listening', onListening); // quand on a l'évènement listening, on lance la fonction callback onListening

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10); // convertit la string val en base 10

  if (isNaN(port)) { // si ce n'est pas un nombre
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') { // The error.syscall property is a string describing the syscall that failed.
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
